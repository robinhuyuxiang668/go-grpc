syntax = "proto3"; // 指定proto版本
package hello_grpc;     // 指定默认包名

// 指定golang包名
option go_package = "/type_grpc";
//option go_package = ".;xxx";//当前目录生成go文件，文件的包名是xxx
//cd到proto生成: protoc -I . --go_out=plugins=grpc:. .\type.proto


//定义rpc服务
service TypeService {
  // 定义函数
  rpc Say (Request) returns (Response) {}
}

//    编写风格
//    文件名建议下划线，例如：my_student.proto
//    包名和目录名对应
//    服务名、方法名、消息名均为大驼峰
//    字段名为下划

// Request 请求内容
message Request {
  double a1 = 1;
  float a2 = 2;
  int32 a3 = 3;  //使用变长编码，对于负值的效率很低，如果你的域有可能有负值，请使用sint64替代
  uint32 a4 = 4;
  uint64 a5 = 5;
  sint32 a6 = 6;
  sint64 a7 = 7;
  fixed32 a8 = 8;
  fixed64 a9 = 9;
  sfixed32 a10 = 10;
  sfixed64 a11 = 11;
  bool a12 = 12;
  string a13 = 13;
  bytes a14 = 14;
}

//对应的GO类型
//type Request struct {
//    state         protoimpl.MessageState
//    sizeCache     protoimpl.SizeCache
//    unknownFields protoimpl.UnknownFields
//
//    A1  float64 `protobuf:"fixed64,1,opt,name=a1,proto3" json:"a1,omitempty"`
//    A2  float32 `protobuf:"fixed32,2,opt,name=a2,proto3" json:"a2,omitempty"`
//    A3  int32   `protobuf:"varint,3,opt,name=a3,proto3" json:"a3,omitempty"`
//    A4  uint32  `protobuf:"varint,4,opt,name=a4,proto3" json:"a4,omitempty"`
//    A5  uint64  `protobuf:"varint,5,opt,name=a5,proto3" json:"a5,omitempty"`
//    A6  int32   `protobuf:"zigzag32,6,opt,name=a6,proto3" json:"a6,omitempty"`
//    A7  int64   `protobuf:"zigzag64,7,opt,name=a7,proto3" json:"a7,omitempty"`
//    A8  uint32  `protobuf:"fixed32,8,opt,name=a8,proto3" json:"a8,omitempty"`
//    A9  uint64  `protobuf:"fixed64,9,opt,name=a9,proto3" json:"a9,omitempty"`
//    A10 int32   `protobuf:"fixed32,10,opt,name=a10,proto3" json:"a10,omitempty"`
//    A11 int64   `protobuf:"fixed64,11,opt,name=a11,proto3" json:"a11,omitempty"`
//    A12 bool    `protobuf:"varint,12,opt,name=a12,proto3" json:"a12,omitempty"`
//    A13 string  `protobuf:"bytes,13,opt,name=a13,proto3" json:"a13,omitempty"`
//    A14 []byte  `protobuf:"bytes,14,opt,name=a14,proto3" json:"a14,omitempty"`
//  }

//数组类型
message ArrayRequest {
  repeated int64 a1 = 1;
  repeated string a2 = 2;
  repeated Request request_list = 3;
}

//map类型
//键只能是基本类型
message MapRequest {
  map<int64, string> m_i_s = 1;
  map<string, bool> m_i_b = 2;
  map<string, ArrayRequest> m_i_arr = 3;
}

//嵌套类型
message Q1 {
  message Q2{
    string name2 = 2;
  }
  string name1 = 1;
  Q2 q2 = 2;
}



// Response 响应内容
message Response{
  string name = 1;
  string message = 2;
}

